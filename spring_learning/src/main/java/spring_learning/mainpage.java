package spring_learning;

import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

//import org.springframework.web.servlet.view.InternalResourceViewResolver;

//Spring Controller + View 기초

//@Controller : 해당 일반 class를 web에서 작동할 수 있도록 변경하도록 함
@Controller
public class mainpage {
	PrintWriter pw = null;
	
	// @GetMapping : doGet, @PostMapping : doPost
	// @RequestMapping : doService
	
	// throws + HttpServletRequest + HttpServletResponse : View 사용하지 않음	
	@GetMapping("/abc.do")	// view가 없는 코드
	public void abc(HttpServletRequest req, HttpServletResponse res) throws Exception {
		
		res.setContentType("text/html;charset=utf-8");
		
		this.pw = res.getWriter();
		this.pw.write("<script>"
				+ "alert('테스트 페이지 입니다.');"
				+ "</script>");
		this.pw.close();
		System.out.println("abc 페이지");
	}
	
	// View를 무조건 사용하는 메소드	
	@PostMapping("/bbb.do")	// view가 있는 코드
	public void bbb(HttpServletRequest req) {
		// Front-end 값을 이관
		String pdnm = req.getParameter("pdnm");
		// View(bbb.jsp)로 이관
		req.setAttribute("pdnm", pdnm);
	}
	
	/* 
	  return 형태의 메소드는 view 파일명을 다르게 사용할 수 있다.
	  기본은 return null (do와 이름이 같은 jsp를 찾게 된다.)
	  return ""; (다른 이름의 jsp를 찾게 된다.)
	 */
	
	@PostMapping("/ccc.do")
	public String ccc(HttpServletRequest req) {
		// Front-end 값을 이관
		String pdnm = req.getParameter("pdnm");
		// View(bbb.jsp)로 이관
		req.setAttribute("pdnm", pdnm);
		return "/product_list";
	}
	
	// request로 view(jsp)로 전달하는 방식이 아님
	@PostMapping("/ddd.do")
	public ModelAndView ddd(HttpServletRequest req) {
		String pdnm = req.getParameter("pdnm");
		String pcode = req.getParameter("pcode");
		String pmoney = req.getParameter("pmoney");
		
		// ModelAndView (Object 자료형) : 배열 구조
		ModelAndView mv = new ModelAndView();
		mv.addObject("pdnm", pdnm);	// addObject : 키 배열 형태로 값을 저장 
		mv.addObject("pcode", pcode);
		mv.addObject("pmoney", pmoney);
		
		// setView : null은 Mapping 이름과 동일한 jsp를 찾게 됩니다.
		// mv.setView(null);	// 다른 View에 출력하고 싶을 때 사용 - 기본은 null
		
		// Mapping과 다른 이름의 jsp를 사용하고 싶을 경우
		// mv.setViewName("bbb");
		
		return mv;	// 무조건 ModelAndView 객체명을 사용해야 함
	}
	
	@PostMapping("/eee.do")
	public String eee(HttpServletRequest req, Model m) {
		String pdnm = req.getParameter("pdnm");
		String pcode = req.getParameter("pcode");
		String pmoney = req.getParameter("pmoney");
		
		// Model(interface)를 이용하여 jsp로 값을 전달 (JSTL 형태로 값 출력)
		m.addAttribute("pdnm",pdnm);
		m.addAttribute("pcode",pcode);
		m.addAttribute("pmoney",pmoney);
		
		return "ddd";
	}
}